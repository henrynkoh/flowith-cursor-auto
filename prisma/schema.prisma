// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  enrollments   Enrollment[]
  courses       Course[]      @relation("CourseInstructor")
  assignments   Assignment[]
  submissions   Submission[]
  workflows     Workflow[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  instructorId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  instructor   User        @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  modules      Module[]
  assignments  Assignment[]
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String
  courseId    String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course    @relation(fields: [courseId], references: [id])
  lessons     Lesson[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  moduleId    String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module      Module    @relation(fields: [moduleId], references: [id])
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  status    EnrollmentStatus @default(ACTIVE)
  progress  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id])
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String
  courseId    String
  creatorId   String
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course      Course       @relation(fields: [courseId], references: [id])
  creator     User         @relation(fields: [creatorId], references: [id])
  submissions Submission[]
}

model Submission {
  id           String   @id @default(cuid())
  content      String   @db.Text
  assignmentId String
  userId       String
  grade        Float?
  feedback     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String
  config      Json
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User     @relation(fields: [creatorId], references: [id])
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
} 